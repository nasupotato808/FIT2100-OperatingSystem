/* Lab 4 Task 2*/
1. Process Completion Order:
   The processes are unlikely to complete in the exact order they were initiated. This is due to the nature of operating system scheduling and the concurrent execution of child processes.

2. Reasons for Non-Sequential Completion:
   - OS Scheduling: The operating system's scheduler determines which process runs at any given time. It may not necessarily run processes in the order they were created.
   - Sleep Duration: Each child process sleeps for 3 seconds, but the exact wake-up time can vary slightly due to system load and scheduling decisions.
   - System Resources: Available CPU cores and current system load can affect how processes are scheduled and execute

3. Consistency Across Runs:
   - The order of process completion is not consistent across different runs, even with the same number of child processes.
   - Process IDs (PIDs) will likely be different in each run, as they are assigned by the operating system based on availability.

4. Behavior with Different Numbers of Processes:
   - With 4 processes, more consistent behavior if the system have a quad-core CPU, as each process could potentially run on its own core.
   - With 10 processes, especially on a system with fewer than 10 cores, more likely to see varied completion orders due to time-sharing between processes.

5. Parent Process Behavior:
   - The parent process creates all child processes in quick succession and then waits for all of them to complete.
   - "All children have terminated" message appears only after all child processes have finished.

6. Process ID Patterns:
   - Child process PIDs are typically sequential or close to sequential, as they're created one after another.
   - However, the exact PIDs can vary between runs and depend on system activity.

7. Potential Variations:
   - On a heavily loaded system (n = 10000), more randomness in the completion order.
   - On a lightly loaded system with many cores, the completion order might more closely match the creation order, especially with fewer processes.



Code:
if pid < 0, exit with a false value
In the first for loop, the parent forks multiple child according to user input.
In child process, print the child process PID and parent process PID
sleep(3): delay for a specific amount of time -- 3 seconds
print the child process id has finished.
exit(0): exit with a true value

second first loop:
wait(NULL) function call is used in the parent process to wait for child process to terminated.
- causes the parent process to block until one of its child processes terminates
- it is used to ensure that the parent doesn't terminate before all its children have finished executing
pid wait(int *status)
called with NULL, discard informaiton about the child's termination status

- Sleep:
      - simulates some form of work or processing time for each child process
      - the process is in a blocked state
      - not consume CPU time, allowing other process to run
      - but it still occupies memory and other system resources allocated to it.
   - if the sleep is removed, same as lab03, some child process might finished earlier


Reference:
1. 
Enter the number of child processes to create: 4
Child process with PID: 41205 and Parent PID: 41204 is starting
Child process with PID: 41206 and Parent PID: 41204 is starting
Child process with PID: 41207 and Parent PID: 41204 is starting
Child process with PID: 41208 and Parent PID: 41204 is starting
Child process with PID: 41205 has finished
Child process with PID: 41206 has finished
Child process with PID: 41207 has finished
Child process with PID: 41208 has finished
All children have terminated. Parent process exiting.
2. 
./task2
Enter the number of child processes to create: 4
Child process with PID: 41214 and Parent PID: 41212 is starting
Child process with PID: 41215 and Parent PID: 41212 is starting
Child process with PID: 41216 and Parent PID: 41212 is starting
Child process with PID: 41217 and Parent PID: 41212 is starting
Child process with PID: 41214 has finished
Child process with PID: 41215 has finished
Child process with PID: 41216 has finished
Child process with PID: 41217 has finished
All children have terminated. Parent process exiting.
3.
Enter the number of child processes to create: 10
Child process with PID: 41220 and Parent PID: 41219 is starting
Child process with PID: 41221 and Parent PID: 41219 is starting
Child process with PID: 41222 and Parent PID: 41219 is starting
Child process with PID: 41223 and Parent PID: 41219 is starting
Child process with PID: 41224 and Parent PID: 41219 is starting
Child process with PID: 41225 and Parent PID: 41219 is starting
Child process with PID: 41226 and Parent PID: 41219 is starting
Child process with PID: 41227 and Parent PID: 41219 is starting
Child process with PID: 41228 and Parent PID: 41219 is starting
Child process with PID: 41229 and Parent PID: 41219 is starting
Child process with PID: 41220 has finished
Child process with PID: 41221 has finished
Child process with PID: 41222 has finished
Child process with PID: 41225 has finished
Child process with PID: 41223 has finished
Child process with PID: 41224 has finished
Child process with PID: 41226 has finished
Child process with PID: 41227 has finished
Child process with PID: 41228 has finished
Child process with PID: 41229 has finished
All children have terminated. Parent process exiting.
4. 
./task2
Enter the number of child processes to create: 10
Child process with PID: 41234 and Parent PID: 41232 is starting
Child process with PID: 41235 and Parent PID: 41232 is starting
Child process with PID: 41236 and Parent PID: 41232 is starting
Child process with PID: 41237 and Parent PID: 41232 is starting
Child process with PID: 41238 and Parent PID: 41232 is starting
Child process with PID: 41239 and Parent PID: 41232 is starting
Child process with PID: 41240 and Parent PID: 41232 is starting
Child process with PID: 41241 and Parent PID: 41232 is starting
Child process with PID: 41242 and Parent PID: 41232 is starting
Child process with PID: 41243 and Parent PID: 41232 is starting
Child process with PID: 41234 has finished
Child process with PID: 41235 has finished
Child process with PID: 41236 has finished
Child process with PID: 41237 has finished
Child process with PID: 41238 has finished
Child process with PID: 41239 has finished
Child process with PID: 41240 has finished
Child process with PID: 41241 has finished
Child process with PID: 41242 has finished
Child process with PID: 41243 has finished
All children have terminated. Parent process exiting.

This behavior demonstrates key concepts in operating systems such as process scheduling, concurrency, and the non-deterministic nature of multi-process execution in a time-sharing environment.
